generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
    Visitor         @map("visitor")
    Student         @map("student")
    Faculty         @map("faculty")
    Administrator   @map("administrator")
}

model Session {
    id              Int         @id @unique @default(autoincrement())

    user            User        @relation(fields: [userId], references: [id])
    userId          Int        

    token           String      @unique
    createdAt       DateTime    @default(now())
}

model User {
    id          Int             @id @unique @default(autoincrement())

    email       String          @unique
    password    String          // hashed

    name        Json
    role        UserRole 

    student     StudentUser?
    faculty     FacultyUser?

    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    sessions    Session[]
}

// TODO: Student Admission Status

enum StudentScholasticStatus {
    Regular         
    Irregular
    Returnee
}

model Program {
    id          Int         @id @unique @default(autoincrement())

    code        String      @unique 
    name        String

    students    StudentUser[]
}

model StudentUser {
    id          Int                         @id @unique @default(autoincrement())

    user        User                        @relation(fields: [userId], references: [id])
    userId      Int                         @unique
    studentNo   String                      @unique

    status      StudentScholasticStatus     @default(Regular)

    program     Program                     @relation(fields: [programId], references: [id])
    programId   Int                         

    year        Int                         @default(1)
    section     Int                         @default(0)

    courses     CourseEnrollment[]
}

model FacultyUser {
    id          Int                     @id @unique @default(autoincrement())

    user        User                    @relation(fields: [userId], references: [id])
    userId      Int                     @unique

    courses     CourseSchedule[]
}

model Course {
    id              Int             @id @unique @default(autoincrement())

    code            String          @unique
    name            String

    units           Float
    
    schedules       CourseSchedule[]
}

model CourseSchedule {
    id              Int                     @id @unique @default(autoincrement())

    course          Course                  @relation(fields: [courseId], references: [id])
    courseId        Int                     

    faculty         FacultyUser             @relation(fields: [facultyId], references: [id])
    facultyId       Int                     

    section         String
    schedule        DateTime
    
    enrollments     CourseEnrollment[]
}

enum GradeStatus {
    Pending
    Passed
    NoCredit
    Incomplete
    Dropped
    Withdrawn
}

model CourseEnrollment {
    id              Int                 @id @unique @default(autoincrement())
    courseSched     CourseSchedule      @relation(fields: [courseSchedId], references: [id])
    courseSchedId   Int                 

    student         StudentUser         @relation(fields: [studentId], references: [id])
    studentId       Int                

    grade           Float               @default(0.00)
    gradeStatus     GradeStatus

    enrolledAt      DateTime            @default(now())
}
